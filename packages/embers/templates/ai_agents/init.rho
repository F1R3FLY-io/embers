{% extends "common/insert_signed.rho" %}

{%- block name -%} agents {%- endblock -%}

{%- block initialization -%}
{%- filter indent(8) -%}

new rl(`rho:registry:lookup`),
    revAddress(`rho:rev:address`),
    devNull(`rho:io:devNull`),
    abort(`rho:execution:abort`),
    deployData(`rho:deploy:data`),
    treeHashMapCh,
    listOpsCh,
    stackCh,
    visit,
    notNil
in {
    rl!(`rho:lang:treeHashMap`, *treeHashMapCh) |
    for(treeHashMap <- treeHashMapCh) {
        treeHashMap!("init", 3, *treeHashMapCh) |

        for(@map <- treeHashMapCh) {
            treeHashMapCh!(*treeHashMap, map)
        }
    } |

    rl!(`rho:lang:listOps`, *listOpsCh) |
    for(@(_, listOps) <- listOpsCh) {
        listOpsCh!(listOps)
    } |

    rl!(`rho:lang:stack`, *stackCh) |
    for(@(_, stack) <- stackCh) {
        stackCh!(stack)
    } |

    contract visit(@"agents", @address, f, notFound) = {
        for(treeHashMap, @map <<- treeHashMapCh) {
            treeHashMap!("getOrElse", map, address, *f, *notFound)
        }
    } |

    contract visit(@"agentVersions", @address, @id, f, notFound) = {
        new foundCh in {
            visit!("agents", address, *foundCh, *notFound) |

            for(@(agents, _) <- foundCh; treeHashMap, _ <<- treeHashMapCh) {
                treeHashMap!("getOrElse", agents, id, *f, *notFound)
            }
        }
    } |

    contract visit(@"agentVersion", @address, @id, @version, f, notFound) = {
        new foundCh in {
            visit!("agentVersions", address, id, *foundCh, *notFound) |

            for(@(agentVersions, _) <- foundCh; treeHashMap, _ <<- treeHashMapCh) {
                treeHashMap!("getOrElse", agentVersions, version, *f, *notFound)
            }
        }
    } |

    contract notNil(@v, ret) = {
        ret!(v != Nil)
    } |

    contract agents(@"create", @id, @version, @created_at, @name, @description, @shard, @logo, @code) = {
        new deployDataCh, deployerAddressCh, valueCh, nilCh, errCh in {
            deployData!(*deployDataCh) |

            for(_, @deployerId, _ <- deployDataCh) {
                revAddress!("fromDeployerId", deployerId, *deployerAddressCh)
            } |

            for(@address <- deployerAddressCh) {
                visit!("agents", address, *valueCh, *nilCh) |

                for(@(agents, agentsIndex) <- valueCh; treeHashMap, _ <<- treeHashMapCh; stack <<- stackCh) {
                    new insertAgentCh, agentVersionsCh, agentVersionsIndexCh in {
                        for(<- insertAgentCh) {
                            stack!("push", agentsIndex, id, *devNull) |

                            treeHashMap!("init", 3, *agentVersionsCh) |
                            stack!("init", *agentVersionsIndexCh) |

                            for(
                                @agentVersions <- agentVersionsCh &
                                @agentVersionsIndex <- agentVersionsIndexCh
                            ) {
                                treeHashMap!("set", agents, id, (agentVersions, agentVersionsIndex), *devNull) |

                                treeHashMap!("set", agentVersions, version,
                                    {
                                        "created_at": created_at,
                                        "last_deploy": Nil,
                                        "name": name,
                                        "description": description,
                                        "shard": shard,
                                        "logo": logo,
                                        "code": code,
                                    }, *devNull) |

                                treeHashMap!("set", agentVersions, "latest",
                                    {
                                        "version": version,
                                        "created_at": created_at,
                                        "last_deploy": Nil,
                                        "name": name,
                                        "description": description,
                                        "shard": shard,
                                        "logo": logo,
                                        "code": code,
                                    }, *devNull) |

                                stack!("push", agentVersionsIndex, version, *devNull)
                            }
                        } |

                        treeHashMap!("getOrElse", agents, id, *errCh, *insertAgentCh)
                    }
                } |

                for(<- nilCh; treeHashMap, @map <<- treeHashMapCh; stack <<- stackCh) {
                    new agentsCh, agentsIndexCh, agentVersionsCh, agentVersionsIndexCh in {
                        treeHashMap!("init", 3, *agentsCh) |
                        stack!("init", *agentsIndexCh) |

                        treeHashMap!("init", 3, *agentVersionsCh) |
                        stack!("init", *agentVersionsIndexCh) |

                        for(
                            @agents <- agentsCh &
                            @agentsIndex <- agentsIndexCh &
                            @agentVersions <- agentVersionsCh &
                            @agentVersionsIndex <- agentVersionsIndexCh
                        ) {
                            treeHashMap!("set", map, address, (agents, agentsIndex), *devNull) |

                            treeHashMap!("set", agents, id, (agentVersions, agentVersionsIndex), *devNull) |
                            stack!("push", agentsIndex, id, *devNull) |

                            treeHashMap!("set", agentVersions, version,
                                {
                                    "created_at": created_at,
                                    "last_deploy": Nil,
                                    "name": name,
                                    "description": description,
                                    "shard": shard,
                                    "logo": logo,
                                    "code": code,
                                }, *devNull) |

                            treeHashMap!("set", agentVersions, "latest",
                                {
                                    "version": version,
                                    "created_at": created_at,
                                    "last_deploy": Nil,
                                    "name": name,
                                    "description": description,
                                    "shard": shard,
                                    "logo": logo,
                                    "code": code,
                                }, *devNull) |

                            stack!("push", agentVersionsIndex, version, *devNull)
                        }
                    }
                }
            } |

            for(<- errCh) {
                abort!("in createAiAgent")
            }
        }
    } |

    contract agents(@"list", @address, ret) = {
        new valueCh, nilCh in {
            for(@(agents, agentsIndex) <- valueCh; treeHashMap, _ <<- treeHashMapCh; listOps <<- listOpsCh; stack <<- stackCh) {
                new toAgentHeader, agentsListCh in {
                    contract toAgentHeader(@id, ret) = {
                        new agentContextCh, agentLastVersionCh in {
                            treeHashMap!("get", agents, id, *agentContextCh) |

                            for(@(agentVersions, _) <- agentContextCh) {
                                treeHashMap!("get", agentVersions, "latest", *agentLastVersionCh) |

                                for(@agentLastVersion <- agentLastVersionCh) {
                                    ret!(agentLastVersion.delete("code").set("id", id))
                                }
                            } |

                            for(@Nil <- agentContextCh) {
                                ret!(Nil)
                            }
                        }
                    } |

                    stack!("toList", agentsIndex, *agentsListCh) |

                    for(@agentsList <- agentsListCh) {
                        new aggregateCh in {
                            listOps!("unorderedParMap", agentsList, *toAgentHeader, *aggregateCh) |
                            for(@aggregate <- aggregateCh) {
                                listOps!("filter", aggregate, *notNil, *ret)
                            }
                        }
                    }
                }
            } |

            for(<- nilCh) {
                ret!([])
            } |

            visit!("agents", address, *valueCh, *nilCh)
        }
    } |

    contract agents(@"listVersions", @address, @id, ret) = {
        new valueCh, nilCh, agentVersionsListCh, toAgentHeader in {
            for(@(agentVersions, agentVersionsIndex) <- valueCh; treeHashMap, _ <<- treeHashMapCh; listOps <<- listOpsCh; stack <<- stackCh) {
                contract toAgentHeader(@version, ret) = {
                    new versionCh in {
                        treeHashMap!("get", agentVersions, version, *versionCh) |

                        for(@agentVersion <- versionCh) {
                            ret!(agentVersion.delete("code").union({"id": id, "version": version}))
                        }
                    }
                } |

                stack!("toList", agentVersionsIndex, *agentVersionsListCh) |

                for(@agentVersionsList <- agentVersionsListCh) {
                    listOps!("parMap", agentVersionsList, *toAgentHeader, *ret)
                }
            } |

            for(<- nilCh) {
                ret!(Nil)
            } |

            visit!("agentVersions", address, id, *valueCh, *nilCh)
        }
    } |

    contract agents(@"get", @address, @id, @version, ret) = {
        new valueCh, nilCh in {
            for(@agentVersion <- valueCh) {
                ret!(agentVersion.union({"id": id, "version": version}))
            } |

            for(<- nilCh) {
                ret!(Nil)
            } |

            visit!("agentVersion", address, id, version, *valueCh, *nilCh)
        }
    } |

    contract agents(@"save", @id, @version, @created_at, @name, @description, @shard, @logo, @code) = {
        new deployDataCh, deployerAddressCh, valueCh, errCh, insertAgentVersionCh in {
            deployData!(*deployDataCh) |

            for(_, @deployerId, _ <- deployDataCh) {
                revAddress!("fromDeployerId", deployerId, *deployerAddressCh)
            } |

            for(@address <- deployerAddressCh) {
                visit!("agentVersions", address, id, *valueCh, *errCh)
            } |

            for(@(agentVersions, agentVersionsIndex) <- valueCh; treeHashMap, _ <<- treeHashMapCh; stack <<- stackCh) {
                for(<- insertAgentVersionCh) {
                    stack!("push", agentVersionsIndex, version, *devNull) |

                    treeHashMap!("set", agentVersions, version,
                        {
                            "created_at": created_at,
                            "last_deploy": Nil,
                            "name": name,
                            "description": description,
                            "shard": shard,
                            "logo": logo,
                            "code": code,
                        }, *devNull) |

                    treeHashMap!("set", agentVersions, "latest",
                        {
                            "version": version,
                            "created_at": created_at,
                            "last_deploy": Nil,
                            "name": name,
                            "description": description,
                            "shard": shard,
                            "logo": logo,
                            "code": code,
                        }, *devNull)
                } |

                treeHashMap!("getOrElse", agentVersions, version, *errCh, *insertAgentVersionCh)
            } |

            for(<- errCh) {
                abort!("in saveAiAgent")
            }
        }
    } |

    contract agents(@"delete", @id) = {
        new deployDataCh, deployerAddressCh, valueCh in {
            deployData!(*deployDataCh) |

            for(_, @deployerId, _ <- deployDataCh) {
                revAddress!("fromDeployerId", deployerId, *deployerAddressCh)
            } |

            for(@address <- deployerAddressCh) {
                visit!("agents", address, *valueCh, *devNull)
            } |

            for(@(agents, _) <- valueCh; treeHashMap, _ <<- treeHashMapCh) {
                treeHashMap!("delete", agents, id, *devNull)
            }
        }
    } |

    contract agents(@"recordDeploy", @id, @version, @last_deploy) = {
        new deployDataCh, deployerAddressCh, valueCh, errCh, updateLastDeploy in {
            deployData!(*deployDataCh) |

            for(_, @deployerId, _ <- deployDataCh) {
                revAddress!("fromDeployerId", deployerId, *deployerAddressCh)
            } |

            for(@address <- deployerAddressCh) {
                visit!("agentVersions", address, id, *valueCh, *errCh)
            } |

            for(@(agentVersions, _) <- valueCh; treeHashMap, _ <<- treeHashMapCh) {
                treeHashMap!("getOrElse", agentVersions, version, *updateLastDeploy, *errCh)

                for(@agent <- updateLastDeploy) {
                    treeHashMap!("set", agentVersions, version, agent.union({"last_deploy": last_deploy}), *devNull)
                }
            } |

            for(<- errCh) {
                abort!("in recordDeployAiAgent")
            }
        }
    }
}

{%- endfilter -%}
{%- endblock -%}
