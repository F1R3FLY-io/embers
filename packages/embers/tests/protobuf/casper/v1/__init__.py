# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: DeployServiceV1.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "BlockInfoResponse",
    "BlockResponse",
    "BondStatusResponse",
    "ContinuationAtNamePayload",
    "ContinuationAtNameResponse",
    "DeployResponse",
    "DeployServiceStub",
    "EventInfoResponse",
    "ExploratoryDeployResponse",
    "FindDeployResponse",
    "IsFinalizedResponse",
    "LastFinalizedBlockResponse",
    "ListeningNameDataPayload",
    "ListeningNameDataResponse",
    "MachineVerifyResponse",
    "PrivateNamePreviewPayload",
    "PrivateNamePreviewResponse",
    "RhoDataPayload",
    "RhoDataResponse",
    "StatusResponse",
    "VisualizeBlocksResponse",
)

from collections.abc import Iterator
from dataclasses import dataclass

import betterproto2
import grpc

from ...message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class BlockInfoResponse(betterproto2.Message):
    """
    showMainChain & getBlocks

    Oneofs:
        - message:
    """

    error: "__servicemodelapi__.ServiceError | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="message"
    )

    block_info: "__casper__.LightBlockInfo | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="message"
    )


default_message_pool.register_message("casper.v1", "BlockInfoResponse", BlockInfoResponse)


@dataclass(eq=False, repr=False)
class BlockResponse(betterproto2.Message):
    """
    getBlock

    Oneofs:
        - message:
    """

    error: "__servicemodelapi__.ServiceError | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="message"
    )

    block_info: "__casper__.BlockInfo | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="message"
    )


default_message_pool.register_message("casper.v1", "BlockResponse", BlockResponse)


@dataclass(eq=False, repr=False)
class BondStatusResponse(betterproto2.Message):
    """


    Oneofs:
        - message:
    """

    error: "__servicemodelapi__.ServiceError | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="message"
    )

    is_bonded: "bool | None" = betterproto2.field(2, betterproto2.TYPE_BOOL, optional=True, group="message")


default_message_pool.register_message("casper.v1", "BondStatusResponse", BondStatusResponse)


@dataclass(eq=False, repr=False)
class ContinuationAtNamePayload(betterproto2.Message):
    block_results: "list[__casper__.ContinuationsWithBlockInfo]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    length: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)


default_message_pool.register_message("casper.v1", "ContinuationAtNamePayload", ContinuationAtNamePayload)


@dataclass(eq=False, repr=False)
class ContinuationAtNameResponse(betterproto2.Message):
    """
    listenForContinuationAtName

    Oneofs:
        - message:
    """

    error: "__servicemodelapi__.ServiceError | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="message"
    )

    payload: "ContinuationAtNamePayload | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="message"
    )


default_message_pool.register_message("casper.v1", "ContinuationAtNameResponse", ContinuationAtNameResponse)


@dataclass(eq=False, repr=False)
class DeployResponse(betterproto2.Message):
    """
    doDeploy

    Oneofs:
        - message:
    """

    error: "__servicemodelapi__.ServiceError | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="message"
    )

    result: "str | None" = betterproto2.field(2, betterproto2.TYPE_STRING, optional=True, group="message")


default_message_pool.register_message("casper.v1", "DeployResponse", DeployResponse)


@dataclass(eq=False, repr=False)
class EventInfoResponse(betterproto2.Message):
    """


    Oneofs:
        - message:
    """

    error: "__servicemodelapi__.ServiceError | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="message"
    )

    result: "__casper__.BlockEventInfo | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="message"
    )


default_message_pool.register_message("casper.v1", "EventInfoResponse", EventInfoResponse)


@dataclass(eq=False, repr=False)
class ExploratoryDeployResponse(betterproto2.Message):
    """


    Oneofs:
        - message:
    """

    error: "__servicemodelapi__.ServiceError | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="message"
    )

    result: "__casper__.DataWithBlockInfo | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="message"
    )


default_message_pool.register_message("casper.v1", "ExploratoryDeployResponse", ExploratoryDeployResponse)


@dataclass(eq=False, repr=False)
class FindDeployResponse(betterproto2.Message):
    """
    findDeploy

    Oneofs:
        - message:
    """

    error: "__servicemodelapi__.ServiceError | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="message"
    )

    block_info: "__casper__.LightBlockInfo | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="message"
    )


default_message_pool.register_message("casper.v1", "FindDeployResponse", FindDeployResponse)


@dataclass(eq=False, repr=False)
class IsFinalizedResponse(betterproto2.Message):
    """
    isFinalized

    Oneofs:
        - message:
    """

    error: "__servicemodelapi__.ServiceError | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="message"
    )

    is_finalized: "bool | None" = betterproto2.field(2, betterproto2.TYPE_BOOL, optional=True, group="message")


default_message_pool.register_message("casper.v1", "IsFinalizedResponse", IsFinalizedResponse)


@dataclass(eq=False, repr=False)
class LastFinalizedBlockResponse(betterproto2.Message):
    """
    lastFinalizedBlock

    Oneofs:
        - message:
    """

    error: "__servicemodelapi__.ServiceError | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="message"
    )

    block_info: "__casper__.BlockInfo | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="message"
    )


default_message_pool.register_message("casper.v1", "LastFinalizedBlockResponse", LastFinalizedBlockResponse)


@dataclass(eq=False, repr=False)
class ListeningNameDataPayload(betterproto2.Message):
    block_info: "list[__casper__.DataWithBlockInfo]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)

    length: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)


default_message_pool.register_message("casper.v1", "ListeningNameDataPayload", ListeningNameDataPayload)


@dataclass(eq=False, repr=False)
class ListeningNameDataResponse(betterproto2.Message):
    """
    listenForDataAtName

    Oneofs:
        - message:
    """

    error: "__servicemodelapi__.ServiceError | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="message"
    )

    payload: "ListeningNameDataPayload | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="message"
    )


default_message_pool.register_message("casper.v1", "ListeningNameDataResponse", ListeningNameDataResponse)


@dataclass(eq=False, repr=False)
class MachineVerifyResponse(betterproto2.Message):
    """
    machineVerifiableDag

    Oneofs:
        - message:
    """

    error: "__servicemodelapi__.ServiceError | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="message"
    )

    content: "str | None" = betterproto2.field(2, betterproto2.TYPE_STRING, optional=True, group="message")


default_message_pool.register_message("casper.v1", "MachineVerifyResponse", MachineVerifyResponse)


@dataclass(eq=False, repr=False)
class PrivateNamePreviewPayload(betterproto2.Message):
    ids: "list[bytes]" = betterproto2.field(1, betterproto2.TYPE_BYTES, repeated=True)
    """
    a la GPrivate
    """


default_message_pool.register_message("casper.v1", "PrivateNamePreviewPayload", PrivateNamePreviewPayload)


@dataclass(eq=False, repr=False)
class PrivateNamePreviewResponse(betterproto2.Message):
    """
    previewPrivateNames

    Oneofs:
        - message:
    """

    error: "__servicemodelapi__.ServiceError | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="message"
    )

    payload: "PrivateNamePreviewPayload | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="message"
    )


default_message_pool.register_message("casper.v1", "PrivateNamePreviewResponse", PrivateNamePreviewResponse)


@dataclass(eq=False, repr=False)
class RhoDataPayload(betterproto2.Message):
    par: "list[__rhoapi__.Par]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)

    block: "__casper__.LightBlockInfo | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)


default_message_pool.register_message("casper.v1", "RhoDataPayload", RhoDataPayload)


@dataclass(eq=False, repr=False)
class RhoDataResponse(betterproto2.Message):
    """
    listenForDataAtPar

    Oneofs:
        - message:
    """

    error: "__servicemodelapi__.ServiceError | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="message"
    )

    payload: "RhoDataPayload | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True, group="message")


default_message_pool.register_message("casper.v1", "RhoDataResponse", RhoDataResponse)


@dataclass(eq=False, repr=False)
class StatusResponse(betterproto2.Message):
    """


    Oneofs:
        - message:
    """

    error: "__servicemodelapi__.ServiceError | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="message"
    )

    status: "__casper__.Status | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="message"
    )


default_message_pool.register_message("casper.v1", "StatusResponse", StatusResponse)


@dataclass(eq=False, repr=False)
class VisualizeBlocksResponse(betterproto2.Message):
    """
    visualizeDag

    Oneofs:
        - message:
    """

    error: "__servicemodelapi__.ServiceError | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="message"
    )

    content: "str | None" = betterproto2.field(2, betterproto2.TYPE_STRING, optional=True, group="message")


default_message_pool.register_message("casper.v1", "VisualizeBlocksResponse", VisualizeBlocksResponse)


class DeployServiceStub:
    """
    Use `doDeploy` to queue deployments of Rholang code and then
    `ProposeServiceV2.propose` to make a new block with the results of running them
    all.

    To get results back, use `listenForDataAtName`.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def do_deploy(self, message: "__casper__.DeployDataProto") -> "DeployResponse":
        """
        Queue deployment of Rholang code (or fail to parse).
        """

        return self._channel.unary_unary(
            "/casper.v1.DeployService/doDeploy",
            __casper__.DeployDataProto.SerializeToString,
            DeployResponse.FromString,
        )(message)

    def get_block(self, message: "__casper__.BlockQuery") -> "BlockResponse":
        """
        Get details about a particular block.
        """

        return self._channel.unary_unary(
            "/casper.v1.DeployService/getBlock",
            __casper__.BlockQuery.SerializeToString,
            BlockResponse.FromString,
        )(message)

    def visualize_dag(self, message: "__casper__.VisualizeDagQuery") -> "Iterator[VisualizeBlocksResponse]":
        """
        Get dag
        """

        yield from self._channel.unary_stream(
            "/casper.v1.DeployService/visualizeDag",
            __casper__.VisualizeDagQuery.SerializeToString,
            VisualizeBlocksResponse.FromString,
        )(message)

    def machine_verifiable_dag(self, message: "__casper__.MachineVerifyQuery | None" = None) -> "MachineVerifyResponse":
        if message is None:
            message = __casper__.MachineVerifyQuery()

        return self._channel.unary_unary(
            "/casper.v1.DeployService/machineVerifiableDag",
            __casper__.MachineVerifyQuery.SerializeToString,
            MachineVerifyResponse.FromString,
        )(message)

    def show_main_chain(self, message: "__casper__.BlocksQuery") -> "Iterator[BlockInfoResponse]":
        """
        Returns on success LightBlockInfo
        """

        yield from self._channel.unary_stream(
            "/casper.v1.DeployService/showMainChain",
            __casper__.BlocksQuery.SerializeToString,
            BlockInfoResponse.FromString,
        )(message)

    def get_blocks(self, message: "__casper__.BlocksQuery") -> "Iterator[BlockInfoResponse]":
        """
        Get a summary of blocks on the blockchain.
        """

        yield from self._channel.unary_stream(
            "/casper.v1.DeployService/getBlocks",
            __casper__.BlocksQuery.SerializeToString,
            BlockInfoResponse.FromString,
        )(message)

    def listen_for_data_at_name(self, message: "__casper__.DataAtNameQuery") -> "ListeningNameDataResponse":
        """
        Find data sent to a name.
        OBSOLETE: Use getDataAtName instead. This method will be removed in the future version of RNode.
        """

        return self._channel.unary_unary(
            "/casper.v1.DeployService/listenForDataAtName",
            __casper__.DataAtNameQuery.SerializeToString,
            ListeningNameDataResponse.FromString,
        )(message)

    def get_data_at_name(self, message: "__casper__.DataAtNameByBlockQuery") -> "RhoDataResponse":
        """
        Find data sent to a name.
        """

        return self._channel.unary_unary(
            "/casper.v1.DeployService/getDataAtName",
            __casper__.DataAtNameByBlockQuery.SerializeToString,
            RhoDataResponse.FromString,
        )(message)

    def listen_for_continuation_at_name(
        self, message: "__casper__.ContinuationAtNameQuery"
    ) -> "ContinuationAtNameResponse":
        """
        Find processes receiving on a name.
        """

        return self._channel.unary_unary(
            "/casper.v1.DeployService/listenForContinuationAtName",
            __casper__.ContinuationAtNameQuery.SerializeToString,
            ContinuationAtNameResponse.FromString,
        )(message)

    def find_deploy(self, message: "__casper__.FindDeployQuery") -> "FindDeployResponse":
        """
        Find block containing a deploy.
        """

        return self._channel.unary_unary(
            "/casper.v1.DeployService/findDeploy",
            __casper__.FindDeployQuery.SerializeToString,
            FindDeployResponse.FromString,
        )(message)

    def preview_private_names(self, message: "__casper__.PrivateNamePreviewQuery") -> "PrivateNamePreviewResponse":
        """
        Preview new top-level unforgeable names (for example, to compute signatures over them).
        """

        return self._channel.unary_unary(
            "/casper.v1.DeployService/previewPrivateNames",
            __casper__.PrivateNamePreviewQuery.SerializeToString,
            PrivateNamePreviewResponse.FromString,
        )(message)

    def last_finalized_block(
        self, message: "__casper__.LastFinalizedBlockQuery | None" = None
    ) -> "LastFinalizedBlockResponse":
        """
        Get details about a particular block.
        """

        if message is None:
            message = __casper__.LastFinalizedBlockQuery()

        return self._channel.unary_unary(
            "/casper.v1.DeployService/lastFinalizedBlock",
            __casper__.LastFinalizedBlockQuery.SerializeToString,
            LastFinalizedBlockResponse.FromString,
        )(message)

    def is_finalized(self, message: "__casper__.IsFinalizedQuery") -> "IsFinalizedResponse":
        """
        Check if a given block is finalized.
        """

        return self._channel.unary_unary(
            "/casper.v1.DeployService/isFinalized",
            __casper__.IsFinalizedQuery.SerializeToString,
            IsFinalizedResponse.FromString,
        )(message)

    def bond_status(self, message: "__casper__.BondStatusQuery") -> "BondStatusResponse":
        """
        Check if a given validator is bonded.
        Returns on success BondStatusResponse
        """

        return self._channel.unary_unary(
            "/casper.v1.DeployService/bondStatus",
            __casper__.BondStatusQuery.SerializeToString,
            BondStatusResponse.FromString,
        )(message)

    def exploratory_deploy(self, message: "__casper__.ExploratoryDeployQuery") -> "ExploratoryDeployResponse":
        """
        Executes deploy as user deploy with immediate rollback and return result
        """

        return self._channel.unary_unary(
            "/casper.v1.DeployService/exploratoryDeploy",
            __casper__.ExploratoryDeployQuery.SerializeToString,
            ExploratoryDeployResponse.FromString,
        )(message)

    def get_blocks_by_heights(self, message: "__casper__.BlocksQueryByHeight") -> "Iterator[BlockInfoResponse]":
        """
        get blocks by block height
        """

        yield from self._channel.unary_stream(
            "/casper.v1.DeployService/getBlocksByHeights",
            __casper__.BlocksQueryByHeight.SerializeToString,
            BlockInfoResponse.FromString,
        )(message)

    def get_event_by_hash(self, message: "__casper__.ReportQuery") -> "EventInfoResponse":
        """
        temporary api for testing
        """

        return self._channel.unary_unary(
            "/casper.v1.DeployService/getEventByHash",
            __casper__.ReportQuery.SerializeToString,
            EventInfoResponse.FromString,
        )(message)

    def status(self, message: "__google__protobuf__.Empty | None" = None) -> "StatusResponse":
        """
        Get node status
        """

        if message is None:
            message = __google__protobuf__.Empty()

        return self._channel.unary_unary(
            "/casper.v1.DeployService/status",
            __google__protobuf__.Empty.SerializeToString,
            StatusResponse.FromString,
        )(message)


from ... import casper as __casper__
from ... import rhoapi as __rhoapi__
from ... import servicemodelapi as __servicemodelapi__
from ...google import protobuf as __google__protobuf__
