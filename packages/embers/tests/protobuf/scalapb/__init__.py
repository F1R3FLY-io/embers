# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: protobuf_external/scalapb/scalapb.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Collection",
    "EnumOptions",
    "EnumValueOptions",
    "FieldOptions",
    "FieldTransformation",
    "MatchType",
    "MessageOptions",
    "OneofOptions",
    "PreprocessorOutput",
    "ScalaPbOptions",
    "ScalaPbOptionsAuxEnumOptions",
    "ScalaPbOptionsAuxEnumValueOptions",
    "ScalaPbOptionsAuxFieldOptions",
    "ScalaPbOptionsAuxMessageOptions",
    "ScalaPbOptionsEnumValueNaming",
    "ScalaPbOptionsOptionsScope",
)

from dataclasses import dataclass

import betterproto2

from ..message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class MatchType(betterproto2.Enum):
    CONTAINS = 0

    EXACT = 1

    PRESENCE = 2


class ScalaPbOptionsEnumValueNaming(betterproto2.Enum):
    """
    Naming convention for generated enum values
    """

    AS_IN_PROTO = 0
    """
    Enum value names in Scala use the same name as in the proto
    """

    CAMEL_CASE = 1
    """
    Convert enum values to CamelCase in Scala.
    """


class ScalaPbOptionsOptionsScope(betterproto2.Enum):
    """
    Whether to apply the options only to this file, or for the entire package (and its subpackages)
    """

    FILE = 0
    """
    Apply the options for this file only (default)
    """

    PACKAGE = 1
    """
    Apply the options for the entire package and its subpackages.
    """


@dataclass(eq=False, repr=False)
class Collection(betterproto2.Message):
    """
    Represents a custom Collection type in Scala. This allows ScalaPB to integrate with
    collection types that are different enough from the ones in the standard library.
    """

    type: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Type of the collection
    """

    non_empty: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    Set to true if this collection type is not allowed to be empty, for example
    cats.data.NonEmptyList.  When true, ScalaPB will not generate `clearX` for the repeated
    field and not provide a default argument in the constructor.
    """

    adapter: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    An Adapter is a Scala object available at runtime that provides certain static methods
    that can operate on this collection type.
    """


default_message_pool.register_message("scalapb", "Collection", Collection)


@dataclass(eq=False, repr=False)
class EnumOptions(betterproto2.Message):
    extends: "list[str]" = betterproto2.field(1, betterproto2.TYPE_STRING, repeated=True)
    """
    Additional classes and traits to mix in to the base trait
    """

    companion_extends: "list[str]" = betterproto2.field(2, betterproto2.TYPE_STRING, repeated=True)
    """
    Additional classes and traits to mix in to the companion object.
    """

    type: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    All instances of this enum will be converted to this type. An implicit TypeMapper
    must be present.
    """

    base_annotations: "list[str]" = betterproto2.field(4, betterproto2.TYPE_STRING, repeated=True)
    """
    Custom annotations to add to the generated enum's base class.
    """

    recognized_annotations: "list[str]" = betterproto2.field(5, betterproto2.TYPE_STRING, repeated=True)
    """
    Custom annotations to add to the generated trait.
    """

    unrecognized_annotations: "list[str]" = betterproto2.field(6, betterproto2.TYPE_STRING, repeated=True)
    """
    Custom annotations to add to the generated Unrecognized case class.
    """


default_message_pool.register_message("scalapb", "EnumOptions", EnumOptions)


@dataclass(eq=False, repr=False)
class EnumValueOptions(betterproto2.Message):
    extends: "list[str]" = betterproto2.field(1, betterproto2.TYPE_STRING, repeated=True)
    """
    Additional classes and traits to mix in to an individual enum value.
    """

    scala_name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    Name in Scala to use for this enum value.
    """

    annotations: "list[str]" = betterproto2.field(3, betterproto2.TYPE_STRING, repeated=True)
    """
    Custom annotations to add to the generated case object for this enum value.
    """


default_message_pool.register_message("scalapb", "EnumValueOptions", EnumValueOptions)


@dataclass(eq=False, repr=False)
class FieldOptions(betterproto2.Message):
    type: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    scala_name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    collection_type: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    Can be specified only if this field is repeated. If unspecified,
    it falls back to the file option named `collection_type`, which defaults
    to `scala.collection.Seq`.
    """

    collection: "Collection | None" = betterproto2.field(8, betterproto2.TYPE_MESSAGE, optional=True)

    key_type: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    If the field is a map, you can specify custom Scala types for the key
    or value.
    """

    value_type: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)

    annotations: "list[str]" = betterproto2.field(6, betterproto2.TYPE_STRING, repeated=True)
    """
    Custom annotations to add to the field.
    """

    map_type: "str" = betterproto2.field(7, betterproto2.TYPE_STRING)
    """
    Can be specified only if this field is a map. If unspecified,
    it falls back to the file option named `map_type` which defaults to
    `scala.collection.immutable.Map`
    """

    no_default_value_in_constructor: "bool" = betterproto2.field(9, betterproto2.TYPE_BOOL)
    """
    If true, no default value will be generated for this field in the message
    constructor. If this field is set, it has the highest precedence and overrides the
    values at the message-level and file-level.
    """

    no_box: "bool" = betterproto2.field(30, betterproto2.TYPE_BOOL)
    """
    Do not box this value in Option[T]. If set, this overrides MessageOptions.no_box
    """

    required: "bool" = betterproto2.field(31, betterproto2.TYPE_BOOL)
    """
    Like no_box it does not box a value in Option[T], but also fails parsing when a value
    is not provided. This enables to emulate required fields in proto3.
    """


default_message_pool.register_message("scalapb", "FieldOptions", FieldOptions)


@dataclass(eq=False, repr=False)
class FieldTransformation(betterproto2.Message):
    when: "_google__protobuf__.FieldDescriptorProto | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    match_type: "MatchType" = betterproto2.field(2, betterproto2.TYPE_ENUM, default_factory=lambda: MatchType(0))

    set: "_google__protobuf__.FieldOptions | None" = betterproto2.field(3, betterproto2.TYPE_MESSAGE, optional=True)


default_message_pool.register_message("scalapb", "FieldTransformation", FieldTransformation)


@dataclass(eq=False, repr=False)
class MessageOptions(betterproto2.Message):
    extends: "list[str]" = betterproto2.field(1, betterproto2.TYPE_STRING, repeated=True)
    """
    Additional classes and traits to mix in to the case class.
    """

    companion_extends: "list[str]" = betterproto2.field(2, betterproto2.TYPE_STRING, repeated=True)
    """
    Additional classes and traits to mix in to the companion object.
    """

    annotations: "list[str]" = betterproto2.field(3, betterproto2.TYPE_STRING, repeated=True)
    """
    Custom annotations to add to the generated case class.
    """

    type: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    All instances of this message will be converted to this type. An implicit TypeMapper
    must be present.
    """

    companion_annotations: "list[str]" = betterproto2.field(5, betterproto2.TYPE_STRING, repeated=True)
    """
    Custom annotations to add to the companion object of the generated class.
    """

    sealed_oneof_extends: "list[str]" = betterproto2.field(6, betterproto2.TYPE_STRING, repeated=True)
    """
    Additional classes and traits to mix in to generated sealed_oneof base trait.
    """

    no_box: "bool" = betterproto2.field(7, betterproto2.TYPE_BOOL)
    """
    If true, when this message is used as an optional field, do not wrap it in an `Option`.
    This is equivalent of setting `(field).no_box` to true on each field with the message type.
    """

    unknown_fields_annotations: "list[str]" = betterproto2.field(8, betterproto2.TYPE_STRING, repeated=True)
    """
    Custom annotations to add to the generated `unknownFields` case class field.
    """

    no_default_values_in_constructor: "bool" = betterproto2.field(9, betterproto2.TYPE_BOOL)
    """
    If true, no default values will be generated in message constructors.
    If set (to true or false), the message-level setting overrides the
    file-level value, and can be overridden by the field-level setting.
    """

    sealed_oneof_companion_extends: "list[str]" = betterproto2.field(10, betterproto2.TYPE_STRING, repeated=True)
    """
    Additional classes and traits to mix in to generated sealed oneof base trait's companion object.
    """


default_message_pool.register_message("scalapb", "MessageOptions", MessageOptions)


@dataclass(eq=False, repr=False)
class OneofOptions(betterproto2.Message):
    extends: "list[str]" = betterproto2.field(1, betterproto2.TYPE_STRING, repeated=True)
    """
    Additional traits to mix in to a oneof.
    """

    scala_name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    Name in Scala to use for this oneof field.
    """


default_message_pool.register_message("scalapb", "OneofOptions", OneofOptions)


@dataclass(eq=False, repr=False)
class PreprocessorOutput(betterproto2.Message):
    options_by_file: "dict[str, ScalaPbOptions]" = betterproto2.field(
        1, betterproto2.TYPE_MAP, map_meta=betterproto2.map_meta(betterproto2.TYPE_STRING, betterproto2.TYPE_MESSAGE)
    )


default_message_pool.register_message("scalapb", "PreprocessorOutput", PreprocessorOutput)


@dataclass(eq=False, repr=False)
class ScalaPbOptions(betterproto2.Message):
    package_name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    If set then it overrides the java_package and package.
    """

    flat_package: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    If true, the compiler does not append the proto base file name
    into the generated package name. If false (the default), the
    generated scala package name is the package_name.basename where
    basename is the proto file name without the .proto extension.
    """

    import_: "list[str]" = betterproto2.field(3, betterproto2.TYPE_STRING, repeated=True)
    """
    Adds the following imports at the top of the file (this is meant
    to provide implicit TypeMappers)
    """

    preamble: "list[str]" = betterproto2.field(4, betterproto2.TYPE_STRING, repeated=True)
    """
    Text to add to the generated scala file.  This can be used only
    when single_file is true.
    """

    single_file: "bool" = betterproto2.field(5, betterproto2.TYPE_BOOL)
    """
    If true, all messages and enums (but not services) will be written
    to a single Scala file.
    """

    no_primitive_wrappers: "bool" = betterproto2.field(7, betterproto2.TYPE_BOOL)
    """
    By default, wrappers defined at
    https://github.com/google/protobuf/blob/master/src/google/protobuf/wrappers.proto,
    are mapped to an Option[T] where T is a primitive type. When this field
    is set to true, we do not perform this transformation.
    """

    primitive_wrappers: "bool" = betterproto2.field(6, betterproto2.TYPE_BOOL)
    """
    DEPRECATED. In ScalaPB <= 0.5.47, it was necessary to explicitly enable
    primitive_wrappers. This field remains here for backwards compatibility,
    but it has no effect on generated code. It is an error to set both
    `primitive_wrappers` and `no_primitive_wrappers`.
    """

    collection_type: "str" = betterproto2.field(8, betterproto2.TYPE_STRING)
    """
    Scala type to be used for repeated fields. If unspecified,
    `scala.collection.Seq` will be used.
    """

    preserve_unknown_fields: "bool" = betterproto2.field(9, betterproto2.TYPE_BOOL)
    """
    If set to true, all generated messages in this file will preserve unknown
    fields.
    """

    object_name: "str" = betterproto2.field(10, betterproto2.TYPE_STRING)
    """
    If defined, sets the name of the file-level object that would be generated. This
    object extends `GeneratedFileObject` and contains descriptors, and list of message
    and enum companions.
    """

    scope: "ScalaPbOptionsOptionsScope" = betterproto2.field(
        11, betterproto2.TYPE_ENUM, default_factory=lambda: ScalaPbOptionsOptionsScope(0)
    )
    """
    Experimental: scope to apply the given options.
    """

    lenses: "bool" = betterproto2.field(12, betterproto2.TYPE_BOOL)
    """
    If true, lenses will be generated.
    """

    retain_source_code_info: "bool" = betterproto2.field(13, betterproto2.TYPE_BOOL)
    """
    If true, then source-code info information will be included in the
    generated code - normally the source code info is cleared out to reduce
    code size.  The source code info is useful for extracting source code
    location from the descriptors as well as comments.
    """

    map_type: "str" = betterproto2.field(14, betterproto2.TYPE_STRING)
    """
    Scala type to be used for maps. If unspecified,
    `scala.collection.immutable.Map` will be used.
    """

    no_default_values_in_constructor: "bool" = betterproto2.field(15, betterproto2.TYPE_BOOL)
    """
    If true, no default values will be generated in message constructors.
    This setting can be overridden at the message-level and for individual
    fields.
    """

    enum_value_naming: "ScalaPbOptionsEnumValueNaming" = betterproto2.field(
        16, betterproto2.TYPE_ENUM, default_factory=lambda: ScalaPbOptionsEnumValueNaming(0)
    )

    enum_strip_prefix: "bool" = betterproto2.field(17, betterproto2.TYPE_BOOL)
    """
    Indicate if prefix (enum name + optional underscore) should be removed in scala code
    Strip is applied before enum value naming changes.
    """

    bytes_type: "str" = betterproto2.field(21, betterproto2.TYPE_STRING)
    """
    Scala type to use for bytes fields.
    """

    java_conversions: "bool" = betterproto2.field(23, betterproto2.TYPE_BOOL)
    """
    Enable java conversions for this file.
    """

    aux_message_options: "list[ScalaPbOptionsAuxMessageOptions]" = betterproto2.field(
        18, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    List of message options to apply to some messages.
    """

    aux_field_options: "list[ScalaPbOptionsAuxFieldOptions]" = betterproto2.field(
        19, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    List of message options to apply to some fields.
    """

    aux_enum_options: "list[ScalaPbOptionsAuxEnumOptions]" = betterproto2.field(
        20, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    List of message options to apply to some enums.
    """

    aux_enum_value_options: "list[ScalaPbOptionsAuxEnumValueOptions]" = betterproto2.field(
        22, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    List of enum value options to apply to some enum values.
    """

    preprocessors: "list[str]" = betterproto2.field(24, betterproto2.TYPE_STRING, repeated=True)
    """
    List of preprocessors to apply.
    """

    field_transformations: "list[FieldTransformation]" = betterproto2.field(
        25, betterproto2.TYPE_MESSAGE, repeated=True
    )

    ignore_all_transformations: "bool" = betterproto2.field(26, betterproto2.TYPE_BOOL)
    """
    Ignores all transformations for this file. This is meant to allow specific files to
    opt out from transformations inherited through package-scoped options.
    """

    getters: "bool" = betterproto2.field(27, betterproto2.TYPE_BOOL)
    """
    If true, getters will be generated.
    """

    test_only_no_java_conversions: "bool" = betterproto2.field(999, betterproto2.TYPE_BOOL)
    """
    For use in tests only. Inhibit Java conversions even when when generator parameters
    request for it.
    """


default_message_pool.register_message("scalapb", "ScalaPbOptions", ScalaPbOptions)


@dataclass(eq=False, repr=False)
class ScalaPbOptionsAuxEnumOptions(betterproto2.Message):
    """
    AuxEnumOptions enables you to set enum-level options through package-scoped options.
    This is useful when you can't add a dependency on scalapb.proto from the proto file that
    defines the enum.
    """

    target: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The fully-qualified name of the enum in the proto name space.
    """

    options: "EnumOptions | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Options to apply to the enum. If there are any options defined on the target enum
    they take precedence over the options.
    """


default_message_pool.register_message("scalapb", "ScalaPbOptions.AuxEnumOptions", ScalaPbOptionsAuxEnumOptions)


@dataclass(eq=False, repr=False)
class ScalaPbOptionsAuxEnumValueOptions(betterproto2.Message):
    """
    AuxEnumValueOptions enables you to set enum value level options through package-scoped
    options.  This is useful when you can't add a dependency on scalapb.proto from the proto
    file that defines the enum.
    """

    target: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The fully-qualified name of the enum value in the proto name space.
    """

    options: "EnumValueOptions | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Options to apply to the enum value. If there are any options defined on
    the target enum value they take precedence over the options.
    """


default_message_pool.register_message(
    "scalapb", "ScalaPbOptions.AuxEnumValueOptions", ScalaPbOptionsAuxEnumValueOptions
)


@dataclass(eq=False, repr=False)
class ScalaPbOptionsAuxFieldOptions(betterproto2.Message):
    """
    AuxFieldOptions enables you to set field-level options through package-scoped options.
    This is useful when you can't add a dependency on scalapb.proto from the proto file that
    defines the field.
    """

    target: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The fully-qualified name of the field in the proto name space.
    """

    options: "FieldOptions | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Options to apply to the field. If there are any options defined on the target message
    they take precedence over the options.
    """


default_message_pool.register_message("scalapb", "ScalaPbOptions.AuxFieldOptions", ScalaPbOptionsAuxFieldOptions)


@dataclass(eq=False, repr=False)
class ScalaPbOptionsAuxMessageOptions(betterproto2.Message):
    """
    AuxMessageOptions enables you to set message-level options through package-scoped options.
    This is useful when you can't add a dependency on scalapb.proto from the proto file that
    defines the message.
    """

    target: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The fully-qualified name of the message in the proto name space.
    """

    options: "MessageOptions | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Options to apply to the message. If there are any options defined on the target message
    they take precedence over the options.
    """


default_message_pool.register_message("scalapb", "ScalaPbOptions.AuxMessageOptions", ScalaPbOptionsAuxMessageOptions)


from ..google import protobuf as _google__protobuf__
