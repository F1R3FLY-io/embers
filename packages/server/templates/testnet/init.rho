{% extends "common/insert_signed.rho" %}

{% block name -%} log {%- endblock %}

{% block initialization -%}
{% filter indent(8) -%}

new rl(`rho:registry:lookup`),
    devNull(`rho:io:devNull`),
    treeHashMapCh,
    stackCh,
    private
in {
    rl!(`rho:lang:treeHashMap`, *treeHashMapCh) |
    for(treeHashMap <- treeHashMapCh) {
        treeHashMap!("init", 3, *treeHashMapCh) |

        for(@map <- treeHashMapCh) {
            treeHashMapCh!(*treeHashMap, map)
        }
    } |

    rl!(`rho:lang:stack`, *stackCh) |
    for(@(_, stack) <- stackCh) {
        stackCh!(stack)
    } |

    contract @(*log, *private)(@level, @message) = {
        new deployData(`rho:deploy:data`), deployDataCh, valueCh, nilCh, logsCh in {
            deployData!(*deployDataCh) |

            for(_, _, @deployId <- deployDataCh; treeHashMap, @map <<- treeHashMapCh; stack <<- stackCh) {
                treeHashMap!("getOrElse", map, deployId.toString(), *valueCh, *nilCh) |

                for(@logs <- valueCh) {
                    stack!("push", logs, {"level": level, "message": message}, *devNull)
                } |

                for(<- nilCh) {
                    stack!("init", *logsCh) |

                    for(@logs <- logsCh) {
                        stack!("push", logs, {"level": level, "message": message}, *devNull) |
                        treeHashMap!("set", map, deployId.toString(), logs, *devNull)
                    }
                }
            }
        }
    } |

    contract log(@"debug", @message) = {
        @(*log, *private)!("debug", message)
    } |

    contract log(@"info", @message) = {
        @(*log, *private)!("info", message)
    } |

    contract log(@"error", @message) = {
        @(*log, *private)!("error", message)
    } |

    contract log(@"get", @deployId, ret) = {
        new valueCh, nilCh in {
            for(@logs <- valueCh; stack <<- stackCh) {
                stack!("toList", logs, *ret)
            } |

            for(<- nilCh) {
                ret!(Nil)
            } |

            for(treeHashMap, @map <<- treeHashMapCh) {
                treeHashMap!("getOrElse", map, deployId, *valueCh, *nilCh)
            }
        }
    }
}

{%- endfilter %}
{%- endblock %}
