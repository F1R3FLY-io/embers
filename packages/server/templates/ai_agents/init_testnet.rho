new
    rl(`rho:registry:lookup`),
    treeHashMapCh,
    stackCh,
    getValueOr,
    log
in {
    rl!(`rho:lang:treeHashMap`, *treeHashMapCh) |
    for(treeHashMap <- treeHashMapCh) {
        treeHashMap!("init", 3, *treeHashMapCh) |

        for(@map <- treeHashMapCh) {
            treeHashMapCh!(*treeHashMap, map)
        }
    } |

    rl!(`rho:lang:stack`, *stackCh) |
    for(@(_, stack) <- stackCh) {
        stackCh!(stack)
    } |

    contract getValueOr(@address, valueCh, nilCh) = {
        new retCh in {
            for(treeHashMap, @map <<- treeHashMapCh) {
                treeHashMap!("get", map, address, *retCh) |

                for(@value <- retCh) {
                    match value {
                        Nil => nilCh!()
                        value => valueCh!(value)
                    }
                }
            }
        }
    } |

    contract log(@level, @hex, @message) = {
        new valueCh, nilCh, done in {
            for(@logs <- valueCh; stack <<- stackCh) {
                stack!("push", logs, {"level": level, "message": message}, *done)
            } |

            for(<- nilCh; treeHashMap, @map <<- treeHashMapCh; stack <<- stackCh) {
                stack!("init", *done) |

                for(@logs <- done) {
                    stack!("push", logs, {"level": level, "message": message}, *done) |
                    treeHashMap!("set", map, hex, logs, *done)
                }
            } |

            getValueOr!(hex, *valueCh, *nilCh)
        }
    } |

    contract @"logDebug"(@deployId, @message) = {
        log!("Debug", deployId.toString(), message)
    } |

    contract @"logInfo"(@deployId, @message) = {
        log!("Info", deployId.toString(), message)
    } |

    contract @"logError"(@deployId, @message) = {
        log!("Error", deployId.toString(), message)
    } |

    contract @"getLogs"(@deployId, ret) = {
        new valueCh, nilCh in {
            for(@logs <- valueCh; stack <<- stackCh) {
                stack!("toList", logs, *ret)
            } |

            for(<- nilCh) {
                ret!(Nil)
            } |

            getValueOr!(deployId, *valueCh, *nilCh)
        }
    }
}
