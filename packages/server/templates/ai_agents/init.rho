new rl(`rho:registry:lookup`), treeHashMapCh, getValueOr, listOpsCh in {
    rl!(`rho:lang:treeHashMap`, *treeHashMapCh) |

    for(treeHashMap <- treeHashMapCh) {
        treeHashMap!("init", 3, *treeHashMapCh) |
        for(map <- treeHashMapCh) {
            treeHashMapCh!(*treeHashMap, *map)
        }
    } |

    contract getValueOr(@address, valueCh, nilCh) = {
        new retCh in {
            for(treeHashMap, map <<- treeHashMapCh) {
                treeHashMap!("get", *map, address, *retCh) |

                for(@value <- retCh) {
                    match value {
                        Nil => nilCh!()
                        value => valueCh!(value)
                    }
                }
            }
        }
    } |

    rl!(`rho:lang:listOps`, *listOpsCh) |

    for(@(_, listOps) <- listOpsCh) {
        listOpsCh!(listOps)
    } |

    contract @"createAiAgent"(@deployerId, @id, @version, @name, @shard, @code) = {
        new revAddress(`rho:rev:address`), retCh, valueCh, nilCh, errCh in {
            revAddress!("fromDeployerId", deployerId, *retCh) |

            for(@address <- retCh) {
                for(@agents <- valueCh; treeHashMap, map <<- treeHashMapCh) {
                    match agents.get(id) {
                        Nil => treeHashMap!("set", *map, address,
                                    agents.set(id,
                                        {
                                            version: {
                                                "name": name,
                                                "shard": shard,
                                                "code": code,
                                            },
                                            "latest": {
                                                "version": version,
                                                "name": name,
                                                "shard": shard,
                                                "code": code,
                                            }
                                        }
                                    ), *retCh)
                        versions => errCh!()
                    }
                } |

                for(<- nilCh; treeHashMap, map <<- treeHashMapCh) {
                    treeHashMap!("set", *map, address,
                        {
                            id: {
                                version: {
                                    "name": name,
                                    "shard": shard,
                                    "code": code,
                                },
                                "latest": {
                                    "version": version,
                                    "name": name,
                                    "shard": shard,
                                    "code": code,
                                }
                            }
                        }, *retCh)
                } |

                for(_ <- retCh) {
                    Nil
                } |

                for(<- errCh) {
                    Nil
                } |

                getValueOr!(address, *valueCh, *nilCh)
            }
        }
    } |

    contract @"listAiAgents"(@address, ret) = {
        new valueCh, nilCh, retCh, toAgentHeader in {
            for(@agents <- valueCh) {
                contract toAgentHeader(@(id, versions), ret) = {
                    ret!(versions.get("latest").delete("code").set("id", id))
                } |

                for(listOps <<- listOpsCh) {
                    listOps!("map", agents.toList(), *toAgentHeader, *ret)
                }
            } |

            for(<- nilCh) {
                ret!([])
            } |

            getValueOr!(address, *valueCh, *nilCh)
        }
    } |

    contract @"listAiAgentVersions"(@address, @id, ret) = {
        new valueCh, nilCh, toAgentHeader in {
            for(@agents <- valueCh) {
                match agents.get(id) {
                    Nil => nilCh!()
                    versions => {
                        contract toAgentHeader(@(version, agent), ret) = {
                            ret!(agent.delete("code").union({"id": id, "version": version}))
                        } |

                        for(listOps <<- listOpsCh) {
                            listOps!("map", versions.delete("latest").toList(), *toAgentHeader, *ret)
                        }
                    }
                }
            } |

            for(<- nilCh) {
                ret!(Nil)
            } |

            getValueOr!(address, *valueCh, *nilCh)
        }
    } |

    contract @"getAiAgent"(@address, @id, @version, ret) = {
        new valueCh, nilCh in {
            for(@agents <- valueCh) {
                match agents.getOrElse(id, {}).get(version) {
                    Nil => nilCh!()
                    agent => ret!(agent.union({"id": id, "version": version}))
                }
            } |

            for(<- nilCh) {
                ret!(Nil)
            } |

            getValueOr!(address, *valueCh, *nilCh)
        }
    } |

    contract @"saveAiAgent"(@deployerId, @id, @version, @name, @shard, @code) = {
        new revAddress(`rho:rev:address`), valueCh, errCh, retCh in {
            revAddress!("fromDeployerId", deployerId, *retCh) |

            for(@address <- retCh) {
                for(@agents <- valueCh; treeHashMap, map <<- treeHashMapCh) {
                    match agents.get(id) {
                        Nil => errCh!()
                        versions => treeHashMap!("set", *map, address,
                                        agents.set(id,
                                            versions.union({
                                                version: {
                                                    "name": name,
                                                    "shard": shard,
                                                    "code": code,
                                                },
                                                "latest": {
                                                    "version": version,
                                                    "name": name,
                                                    "shard": shard,
                                                    "code": code,
                                                }
                                            })
                                        )
                                    ), *retCh)
                    } |

                    for(_ <- retCh) {
                        Nil
                    }
                } |

                for(<- errCh) {
                    Nil
                } |

                getValueOr!(address, *valueCh, *errCh)
            }
        }
    }
}
